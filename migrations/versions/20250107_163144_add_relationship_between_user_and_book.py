from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision = 'e145c6a0a3ba'
down_revision = '9a45bdb933bc'
branch_labels = None
depends_on = None

def upgrade():
    # Use reflection to check if 'user_id' column exists
    bind = op.get_bind()
    inspector = Inspector.from_engine(bind)
    columns = [column['name'] for column in inspector.get_columns('books')]
    
    # Only add the column if it doesn't already exist
    if 'user_id' not in columns:
        with op.batch_alter_table('books', schema=None) as batch_op:
            batch_op.add_column(sa.Column('user_id', sa.Integer(), nullable=False))
            batch_op.create_foreign_key('fk_user_book', 'users', ['user_id'], ['id'])

def downgrade():
    # ### commands auto-generated by Alembic - please adjust! ###
    with op.batch_alter_table('books', schema=None) as batch_op:
        batch_op.drop_constraint('fk_user_book', type_='foreignkey')  # Specify the name of the constraint
        batch_op.drop_column('user_id')
    # ### end Alembic commands ###
