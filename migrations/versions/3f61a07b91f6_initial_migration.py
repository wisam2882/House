from alembic import op
import sqlalchemy as sa
import os

environment = os.getenv("FLASK_ENV")
SCHEMA = os.environ.get("SCHEMA")
is_sqlite = os.getenv("SQLALCHEMY_DATABASE_URI", "").startswith("sqlite")

# revision identifiers, used by Alembic.
revision = '3f61a07b91f6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    if not is_sqlite and SCHEMA:
        # Only apply schema changes if not using SQLite and SCHEMA is set.
        op.create_table(
            'books',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('title', sa.String(length=255), nullable=False),
            sa.Column('author', sa.String(length=255), nullable=False),
            sa.Column('cover_image', sa.String(length=255), nullable=True),
            sa.Column('description', sa.Text(), nullable=True),
            sa.Column('genre', sa.String(length=100), nullable=True),
            sa.PrimaryKeyConstraint('id'),
            schema=SCHEMA
        )
        
        op.create_table(
            'users',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('username', sa.String(length=40), nullable=False),
            sa.Column('email', sa.String(length=255), nullable=False),
            sa.Column('hashed_password', sa.String(length=255), nullable=False),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('email'),
            sa.UniqueConstraint('username'),
            schema=SCHEMA
        )
        
        op.create_table(
            'reviews',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('book_id', sa.Integer(), nullable=False),
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('rating', sa.Integer(), nullable=False),
            sa.Column('comment', sa.Text(), nullable=True),
            sa.ForeignKeyConstraint(['book_id'], ['books.id'], ),
            sa.PrimaryKeyConstraint('id'),
            schema=SCHEMA
        )
        
        op.create_table(
            'user_books',
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('book_id', sa.Integer(), nullable=False),
            sa.ForeignKeyConstraint(['book_id'], ['books.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('user_id', 'book_id'),
            schema=SCHEMA
        )
        
        op.create_table(
            'book_reviews',
            sa.Column('book_id', sa.Integer(), nullable=False),
            sa.Column('review_id', sa.Integer(), nullable=False),
            sa.ForeignKeyConstraint(['book_id'], ['books.id'], ),
            sa.ForeignKeyConstraint(['review_id'], ['reviews.id'], ),
            sa.PrimaryKeyConstraint('book_id', 'review_id'),
            schema=SCHEMA
        )
        
    else:
        # If SQLite or no SCHEMA is set, create tables without schema.
        op.create_table(
            'books',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('title', sa.String(length=255), nullable=False),
            sa.Column('author', sa.String(length=255), nullable=False),
            sa.Column('cover_image', sa.String(length=255), nullable=True),
            sa.Column('description', sa.Text(), nullable=True),
            sa.Column('genre', sa.String(length=100), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )
        
        op.create_table(
            'users',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('username', sa.String(length=40), nullable=False),
            sa.Column('email', sa.String(length=255), nullable=False),
            sa.Column('hashed_password', sa.String(length=255), nullable=False),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('email'),
            sa.UniqueConstraint('username')
        )
        
        op.create_table(
            'reviews',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('book_id', sa.Integer(), nullable=False),
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('rating', sa.Integer(), nullable=False),
            sa.Column('comment', sa.Text(), nullable=True),
            sa.ForeignKeyConstraint(['book_id'], ['books.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
        
        op.create_table(
            'user_books',
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('book_id', sa.Integer(), nullable=False),
            sa.ForeignKeyConstraint(['book_id'], ['books.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('user_id', 'book_id')
        )
        
        op.create_table(
            'book_reviews',
            sa.Column('book_id', sa.Integer(), nullable=False),
            sa.Column('review_id', sa.Integer(), nullable=False),
            sa.ForeignKeyConstraint(['book_id'], ['books.id'], ),
            sa.ForeignKeyConstraint(['review_id'], ['reviews.id'], ),
            sa.PrimaryKeyConstraint('book_id', 'review_id')
        )

    if environment == "production" and not is_sqlite:
        # Add schema for production if it's not SQLite
        op.execute(f"ALTER TABLE users SET SCHEMA {SCHEMA};")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('book_reviews')
    op.drop_table('user_books')
    op.drop_table('reviews')
    op.drop_table('users')
    op.drop_table('books')
    # ### end Alembic commands ###
